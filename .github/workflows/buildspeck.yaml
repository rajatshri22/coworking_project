name: Automatic Deployment Pipeline

on:
  push:
    branches:
      - main  

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    # Check out the code from the repository.
      - name: Checkout code
        uses: actions/checkout@v2

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: ${{ secrets.AWS_REGION }}

      # Download kubectl binary
      - name: Download kubectl binaries
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          
      # Install kubectl
      - name: Install Kubectl
        run: |
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client

      - name: Set up AWS credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV  


      - name: Create EKS Cluster
        working-directory: analytics
        run: |
          eksctl create cluster --name my-cluster --region us-east-1 --nodegroup-name my-nodes --node-type t3.small --nodes 1 --nodes-min 1 --nodes-max 2

      - name: Update the Kubeconfig
        working-directory: analytics
        run: |
          aws eks --region us-east-1 update-kubeconfig --name my-cluster


      - name: Verify and copy the context name
        working-directory: analytics
        run: |
          kubectl config current-context


      - name: View the entire Kubeconfig file
        working-directory: analytics
        run: |
          kubectl config view

      - name: kubectl get namespace
        working-directory: analytics
        run: |
          kubectl get namespace

      - name: kubectl get storageclass
        working-directory: analytics
        run: |
          kubectl get storageclass

      - name: kubectl apply configuration
        working-directory: analytics
        run: |
          kubectl apply -f pvc.yaml
          kubectl apply -f pv.yaml
          kubectl apply -f postgresql-deployment.yaml

      - name: Get kubectl pod
        working-directory: analytics
        run: |
          kubectl get pod

      - name: Get kubectl run postgresql service
        working-directory: analytics
        run: |
          kubectl apply -f postgresql-service.yaml

# Set up port-forwarding for the postgresql service
      - name: Setup port-forwarding 
        working-directory: analytics
        run: |
          kubectl get svc
          kubectl port-forward service/postgresql-service 5433:5432 &


      - name: Set docker image
        working-directory: starter/frontend/k8s
        run: |
          kustomize edit set image frontend=${{ secrets.AWS_ECR_REPOSITORY }}:${{ env.GIT_SHA }}

      - name: Deploy to kubernetes
        working-directory: starter/frontend/k8s
        run: |
          kustomize build | kubectl apply -f -

      - name: Get kubectl services
        working-directory: starter/frontend/k8s
        run: |
          kubectl get services

      - name: Get kubectl svc
        working-directory: starter/frontend/k8s
        run: |
          kubectl get svc

      - name: Get kubectl pod
        working-directory: starter/frontend/k8s
        run: |
          kubectl get pod


      # Set up a Node.js environment using the specified node version.
      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: '>=18'

    #Install dependencies
      - name: Install dependencies
        run: npm install
        working-directory: starter/frontend  

      # Run lint.
      - name: Run lint
        run: npx eslint
        working-directory: starter/frontend

  test:
    runs-on: ubuntu-latest
    steps:
    # Check out the code from the repository.
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up a Node.js environment using the specified node version.
      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: '>=18'

    #Install dependencies
      - name: Install dependencies
        run: npm install
        working-directory: starter/frontend  

      # Run lint.
      - name: Run lint
        run: npx eslint
        working-directory: starter/frontend

      - name: Run Unit Tests
        run: npm test
        working-directory: starter/frontend/src/components/__tests__

  build:
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
    steps:
    # Check out the code from the repository.
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up a Node.js environment using the specified node version.
      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: '>=18'

    #Install dependencies
      - name: Install dependencies
        run: npm install
        working-directory: starter/frontend  

      - name: Fix permissions for react-scripts
        run: chmod +x node_modules/.bin/react-scripts
        working-directory: starter/frontend

      - name: Build Frontend Application
        run: npm run build
        working-directory: starter/frontend

      - name: Get Git SHA
        id: vars
        run: echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  

      - name: Log in to AWS ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REPOSITORY }}

    # Build the Image
      - name: Build Docker image
        run: |
          docker build -t frontend:latest .
        working-directory: starter/frontend

      - name: Tag Docker image
        run: |
          docker tag frontend:latest ${{ secrets.AWS_ECR_REPOSITORY }}:${{ env.GIT_SHA }}
        working-directory: starter/frontend

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ECR_REPOSITORY }}:${{ env.GIT_SHA }}
        working-directory: starter/frontend

  deploy:
    name: Deploy Frontend to Kubernetes
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
  
